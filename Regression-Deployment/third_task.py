# -*- coding: utf-8 -*-
"""Third-Task.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vMYOB1H5xlaLUx8UFahs53n11PeTpkUZ
"""

import pip
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
import numpy as np
import pandas as pd
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

df = pd.read_csv('content/first-inten-project.csv')
df.head(5) 

df = df.drop(columns=['Booking_ID'])

le = LabelEncoder()
categorical_cols = ['type of meal', 'room type', 'market segment type']
for col in categorical_cols:
    df[col] = le.fit_transform(df[col])

df.head()

df['date of reservation'] = pd.to_datetime(df['date of reservation'], errors='coerce') # Convert 'date of reservation' column to datetime
df = df.fillna({'date of reservation': pd.Timestamp.today()})  # Fill missing values with today's date
df['year'] = df['date of reservation'].dt.year
df['month'] = df['date of reservation'].dt.month
df['day'] = df['date of reservation'].dt.day
df = df.drop(columns=['date of reservation']) # Remove the original 'date of reservation' column

df.head()

df['booking status'] = le.fit_transform(df['booking status'])
numeric_cols = df.select_dtypes(include=['int64', 'float64']).columns

X = df.drop(columns=['booking status'])
y = df['booking status']
X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.3, random_state=42)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)

#pip install scikit-learn
from sklearn.datasets import make_classification
import pandas as pd

X, y = make_classification(
    n_samples=1000, n_features=20, n_informative=10, n_classes=2, random_state=42
)

# Convert X and y to a DataFrame
X = pd.DataFrame(X)
y = pd.Series(y)

c_space = np.logspace(-5, 8, 15)
param_grid = {'C': c_space}

logreg = LogisticRegression()

le = LabelEncoder()
categorical_cols = ['type of meal', 'room type', 'market segment type']
for col in categorical_cols:
    df[col] = le.fit_transform(df[col])

df.head()

logreg_cv = GridSearchCV(logreg, param_grid, cv=5)
logreg_cv.fit(X, y)
print("Tuned Logistic Regression Parameters: {}".format(logreg_cv.best_params_))
print("Best score is {}".format(logreg_cv.best_score_))

logreg_cv.predict([[1,1,1,2,0,0,0,1,4,0,0,0,50,1,2018,4,20, 0, 0, 0]])

import pickle

with open('model.pkl', 'wb') as f:
    pickle.dump(logreg_cv, f)

